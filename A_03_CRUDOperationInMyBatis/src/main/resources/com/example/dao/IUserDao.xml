<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.dao.IUserDao">
    <select id="findAll" resultType="com.example.domain.User">
        SELECT *
        FROM USER;
    </select>

    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="com.example.domain.User">
        <!--配置插入操作后，获取插入数据的id
            keyProperty:        实体类（User类）中接收last_insert_id()函数返回结果的属性
            keyColumn:          数据库的列名，在Windows平台不区分大小写(可以使用ID)，但是在Linux中区分大小写(只能使用id）
            resultType:         执行结果的类型，本例中是整型
            order:              是先执行还是后执行
        -->
        <selectKey keyProperty="userId" keyColumn="ID" resultType="int" order="AFTER">
            SELECT last_insert_id();
        </selectKey>
        <!-- error: There is no getter for property named 'UserBirthday' in 'class com.example.domain.User -->
        <!-- INSERT INTO USER(USERNAME, BIRTHDAY, SEX, ADDRESS) VALUES (#{userName}, #{UserBirthday}, #{userSex}, #{userAddress}); -->
         INSERT INTO USER(USERNAME, BIRTHDAY, SEX, ADDRESS) VALUES (#{userName}, #{userBirthday}, #{userSex}, #{userAddress}); <!-- ok -->
    </insert>

    <update id="updateUser" parameterType="com.example.domain.User">
        UPDATE USER
        SET ID=#{userId},
            ADDRESS=#{userAddress},
            BIRTHDAY=#{userBirthday}
        WHERE USERNAME = #{userName};
    </update>

    <delete id="deleteUser" parameterType="int">
        DELETE
        FROM USER
        WHERE ID =
              #{uid};
    </delete>

    <select id="findById" parameterType="int" resultType="com.example.domain.User">
        SELECT *
        FROM USER
        WHERE ID = #{userId};
    </select>

    <select id="findByUsername" parameterType="String" resultType="com.example.domain.User">
        <!-- 中间生成的PreparedStatement语句是select * from user where username like ? -->
        SELECT *
        FROM USER
        WHERE USERNAME LIKE #{name};
        <!-- 最终生成的SQL语句是select * from user where username = '%王%' -->
        <!-- SELECT * FROM USER WHERE USERNAME LIKE '%${value}%'; -->
        <!-- 对比以上两种方式，第一种方式更好 -->
    </select>

    <select id="findByVo" parameterType="com.example.domain.QueryVo" resultType="com.example.domain.User">
        SELECT *
        FROM USER
        WHERE USERNAME LIKE #{user.username};
    </select>

    <select id="findTotal" resultType="int">
        SELECT COUNT(ID)
        FROM USER;
    </select>
</mapper>